{"data":{"site":{"siteMetadata":{"url":"https://developer-diary.netlify.com","title":"Developer Diary","labels":[{"tag":"react","tech":"React","name":"M12 9.861A2.139 2.139 0 1 0 12 14.139 2.139 2.139 0 1 0 12 9.861zM6.008 16.255l-.472-.12C2.018 15.246 0 13.737 0 11.996s2.018-3.25 5.536-4.139l.472-.119.133.468a23.53 23.53 0 0 0 1.363 3.578l.101.213-.101.213a23.307 23.307 0 0 0-1.363 3.578l-.133.467zM5.317 8.95c-2.674.751-4.315 1.9-4.315 3.046 0 1.145 1.641 2.294 4.315 3.046a24.95 24.95 0 0 1 1.182-3.046A24.752 24.752 0 0 1 5.317 8.95zM17.992 16.255l-.133-.469a23.357 23.357 0 0 0-1.364-3.577l-.101-.213.101-.213a23.42 23.42 0 0 0 1.364-3.578l.133-.468.473.119c3.517.889 5.535 2.398 5.535 4.14s-2.018 3.25-5.535 4.139l-.473.12zm-.491-4.259c.48 1.039.877 2.06 1.182 3.046 2.675-.752 4.315-1.901 4.315-3.046 0-1.146-1.641-2.294-4.315-3.046a24.788 24.788 0 0 1-1.182 3.046zM5.31 8.945l-.133-.467C4.188 4.992 4.488 2.494 6 1.622c1.483-.856 3.864.155 6.359 2.716l.34.349-.34.349a23.552 23.552 0 0 0-2.422 2.967l-.135.193-.235.02a23.657 23.657 0 0 0-3.785.61l-.472.119zm1.896-6.63c-.268 0-.505.058-.705.173-.994.573-1.17 2.565-.485 5.253a25.122 25.122 0 0 1 3.233-.501 24.847 24.847 0 0 1 2.052-2.544c-1.56-1.519-3.037-2.381-4.095-2.381zM16.795 22.677c-.001 0-.001 0 0 0-1.425 0-3.255-1.073-5.154-3.023l-.34-.349.34-.349a23.53 23.53 0 0 0 2.421-2.968l.135-.193.234-.02a23.63 23.63 0 0 0 3.787-.609l.472-.119.134.468c.987 3.484.688 5.983-.824 6.854a2.38 2.38 0 0 1-1.205.308zm-4.096-3.381c1.56 1.519 3.037 2.381 4.095 2.381h.001c.267 0 .505-.058.704-.173.994-.573 1.171-2.566.485-5.254a25.02 25.02 0 0 1-3.234.501 24.674 24.674 0 0 1-2.051 2.545zM18.69 8.945l-.472-.119a23.479 23.479 0 0 0-3.787-.61l-.234-.02-.135-.193a23.414 23.414 0 0 0-2.421-2.967l-.34-.349.34-.349C14.135 1.778 16.515.767 18 1.622c1.512.872 1.812 3.37.824 6.855l-.134.468zM14.75 7.24c1.142.104 2.227.273 3.234.501.686-2.688.509-4.68-.485-5.253-.988-.571-2.845.304-4.8 2.208A24.849 24.849 0 0 1 14.75 7.24zM7.206 22.677A2.38 2.38 0 0 1 6 22.369c-1.512-.871-1.812-3.369-.823-6.854l.132-.468.472.119c1.155.291 2.429.496 3.785.609l.235.02.134.193a23.596 23.596 0 0 0 2.422 2.968l.34.349-.34.349c-1.898 1.95-3.728 3.023-5.151 3.023zm-1.19-6.427c-.686 2.688-.509 4.681.485 5.254.987.563 2.843-.305 4.8-2.208a24.998 24.998 0 0 1-2.052-2.545 24.976 24.976 0 0 1-3.233-.501zM12 16.878c-.823 0-1.669-.036-2.516-.106l-.235-.02-.135-.193a30.388 30.388 0 0 1-1.35-2.122 30.354 30.354 0 0 1-1.166-2.228l-.1-.213.1-.213a30.3 30.3 0 0 1 1.166-2.228c.414-.716.869-1.43 1.35-2.122l.135-.193.235-.02a29.785 29.785 0 0 1 5.033 0l.234.02.134.193a30.006 30.006 0 0 1 2.517 4.35l.101.213-.101.213a29.6 29.6 0 0 1-2.517 4.35l-.134.193-.234.02c-.847.07-1.694.106-2.517.106zm-2.197-1.084c1.48.111 2.914.111 4.395 0a29.006 29.006 0 0 0 2.196-3.798 28.585 28.585 0 0 0-2.197-3.798 29.031 29.031 0 0 0-4.394 0 28.477 28.477 0 0 0-2.197 3.798 29.114 29.114 0 0 0 2.197 3.798z","size":20,"color":"deepskyblue"},{"tag":"nodejs","tech":"Node.js","name":"M11.177 25.3a1.94 1.94 0 0 1-.969-.259l-3.086-1.826c-.46-.257-.235-.349-.083-.402.614-.213.739-.262 1.394-.635.069-.038.159-.024.231.018l2.37 1.407a.304.304 0 0 0 .287 0l9.241-5.333a.292.292 0 0 0 .141-.25V7.355a.3.3 0 0 0-.143-.255l-9.237-5.329a.29.29 0 0 0-.285 0L1.803 7.102a.296.296 0 0 0-.146.253v10.666c0 .102.056.198.145.247l2.532 1.462c1.374.687 2.215-.122 2.215-.935V8.265c0-.149.12-.266.269-.266H7.99c.146 0 .267.117.267.266v10.53c0 1.833-.998 2.885-2.736 2.885-.534 0-.955 0-2.129-.579L.969 19.706A1.953 1.953 0 0 1 0 18.02V7.355c0-.693.371-1.339.969-1.684l9.242-5.34a2.023 2.023 0 0 1 1.942 0l9.241 5.34c.599.346.971.992.971 1.684V18.02c0 .693-.372 1.337-.971 1.686l-9.241 5.335a1.942 1.942 0 0 1-.973.259zm2.855-7.348c-4.045 0-4.892-1.857-4.892-3.414 0-.148.118-.266.266-.266h1.195c.133 0 .245.096.265.226.18 1.216.717 1.831 3.164 1.831 1.946 0 2.775-.441 2.775-1.473 0-.596-.234-1.037-3.26-1.334-2.528-.25-4.093-.809-4.093-2.831 0-1.865 1.572-2.977 4.207-2.977 2.961 0 4.425 1.027 4.611 3.233a.27.27 0 0 1-.267.291h-1.2a.266.266 0 0 1-.259-.209c-.288-1.28-.988-1.689-2.886-1.689-2.126 0-2.373.74-2.373 1.295 0 .673.292.869 3.161 1.248 2.84.375 4.19.907 4.19 2.902 0 2.014-1.678 3.167-4.606 3.167z","size":20,"color":"lightgreen"},{"tag":"git","tech":"Git","name":"M23.546 10.93L13.067.452c-.604-.603-1.582-.603-2.188 0L8.708 2.627l2.76 2.76c.645-.215 1.379-.07 1.889.441.516.515.658 1.258.438 1.9l2.658 2.66c.645-.223 1.387-.078 1.9.435.721.72.721 1.884 0 2.604-.719.719-1.881.719-2.6 0-.539-.541-.674-1.337-.404-1.996L12.86 8.955v6.525c.176.086.342.203.488.348.713.721.713 1.883 0 2.6-.719.721-1.889.721-2.609 0-.719-.719-.719-1.879 0-2.598.182-.18.387-.316.605-.406V8.835c-.217-.091-.424-.222-.6-.401-.545-.545-.676-1.342-.396-2.009L7.636 3.7.45 10.881c-.6.605-.6 1.584 0 2.189l10.48 10.477c.604.604 1.582.604 2.186 0l10.43-10.43c.605-.603.605-1.582 0-2.187","size":20,"color":"white"},{"tag":"javascript","tech":"JavaScript","name":"M0 0h24v24H0V0zm22.034 18.276c-.175-1.095-.888-2.015-3.003-2.873-.736-.345-1.554-.585-1.797-1.14-.091-.33-.105-.51-.046-.705.15-.646.915-.84 1.515-.66.39.12.75.42.976.9 1.034-.676 1.034-.676 1.755-1.125-.27-.42-.404-.601-.586-.78-.63-.705-1.469-1.065-2.834-1.034l-.705.089c-.676.165-1.32.525-1.71 1.005-1.14 1.291-.811 3.541.569 4.471 1.365 1.02 3.361 1.244 3.616 2.205.24 1.17-.87 1.545-1.966 1.41-.811-.18-1.26-.586-1.755-1.336l-1.83 1.051c.21.48.45.689.81 1.109 1.74 1.756 6.09 1.666 6.871-1.004.029-.09.24-.705.074-1.65l.046.067zm-8.983-7.245h-2.248c0 1.938-.009 3.864-.009 5.805 0 1.232.063 2.363-.138 2.711-.33.689-1.18.601-1.566.48-.396-.196-.597-.466-.83-.855-.063-.105-.11-.196-.127-.196l-1.825 1.125c.305.63.75 1.172 1.324 1.517.855.51 2.004.675 3.207.405.783-.226 1.458-.691 1.811-1.411.51-.93.402-2.07.397-3.346.012-2.054 0-4.109 0-6.179l.004-.056z","size":20,"color":"yellow"},{"tag":"css","tech":"CSS","name":"M1.5 0h21l-1.91 21.563L11.977 24l-8.565-2.438L1.5 0zm17.09 4.413L5.41 4.41l.213 2.622 10.125.002-.255 2.716h-6.64l.24 2.573h6.182l-.366 3.523-2.91.804-2.956-.81-.188-2.11h-2.61l.29 3.855L12 19.288l5.373-1.53L18.59 4.414z","size":20,"color":"teal"},{"tag":"python","tech":"Python","name":"M14.31.18l.9.2.73.26.59.3.45.32.34.34.25.34.16.33.1.3.04.26.02.2-.01.13V8.5l-.05.63-.13.55-.21.46-.26.38-.3.31-.33.25-.35.19-.35.14-.33.1-.3.07-.26.04-.21.02H8.83l-.69.05-.59.14-.5.22-.41.27-.33.32-.27.35-.2.36-.15.37-.1.35-.07.32-.04.27-.02.21v3.06H3.23l-.21-.03-.28-.07-.32-.12-.35-.18-.36-.26-.36-.36-.35-.46-.32-.59-.28-.73-.21-.88-.14-1.05L0 11.97l.06-1.22.16-1.04.24-.87.32-.71.36-.57.4-.44.42-.33.42-.24.4-.16.36-.1.32-.05.24-.01h.16l.06.01h8.16v-.83H6.24l-.01-2.75-.02-.37.05-.34.11-.31.17-.28.25-.26.31-.23.38-.2.44-.18.51-.15.58-.12.64-.1.71-.06.77-.04.84-.02 1.27.05 1.07.13zm-6.3 1.98l-.23.33-.08.41.08.41.23.34.33.22.41.09.41-.09.33-.22.23-.34.08-.41-.08-.41-.23-.33-.33-.22-.41-.09-.41.09-.33.22zM21.1 6.11l.28.06.32.12.35.18.36.27.36.35.35.47.32.59.28.73.21.88.14 1.04.05 1.23-.06 1.23-.16 1.04-.24.86-.32.71-.36.57-.4.45-.42.33-.42.24-.4.16-.36.09-.32.05-.24.02-.16-.01h-8.22v.82h5.84l.01 2.76.02.36-.05.34-.11.31-.17.29-.25.25-.31.24-.38.2-.44.17-.51.15-.58.13-.64.09-.71.07-.77.04-.84.01-1.27-.04-1.07-.14-.9-.2-.73-.25-.59-.3-.45-.33-.34-.34-.25-.34-.16-.33-.1-.3-.04-.25-.02-.2.01-.13v-5.34l.05-.64.13-.54.21-.46.26-.38.3-.32.33-.24.35-.2.35-.14.33-.1.3-.06.26-.04.21-.02.13-.01h5.84l.69-.05.59-.14.5-.21.41-.28.33-.32.27-.35.2-.36.15-.36.1-.35.07-.32.04-.28.02-.21V6.07h2.09l.14.01.21.03zm-6.47 14.25l-.23.33-.08.41.08.41.23.33.33.23.41.08.41-.08.33-.23.23-.33.08-.41-.08-.41-.23-.33-.33-.23-.41-.08-.41.08-.33.23z","size":20,"color":"deepskyblue"},{"tag":"ruby","tech":"Ruby","name":"M20.156.083c3.033.525 3.893 2.598 3.829 4.77L24 4.822 22.635 22.71 4.89 23.926h.016C3.433 23.864.15 23.729 0 19.139l1.645-3 2.819 6.586.503 1.172 2.805-9.144-.03.007.016-.03 9.255 2.956-1.396-5.431-.99-3.9 8.82-.569-.615-.51L16.5 2.114 20.159.073l-.003.01zM0 19.089v.026-.029.003zM5.13 5.073c3.561-3.533 8.157-5.621 9.922-3.84 1.762 1.777-.105 6.105-3.673 9.636-3.563 3.532-8.103 5.734-9.864 3.957-1.766-1.777.045-6.217 3.612-9.75l.003-.003z","size":20,"color":"crimson"},{"tag":"java","tech":"Java","name":"M8.851 18.56s-.917.534.653.714c1.902.218 2.874.187 4.969-.211 0 0 .552.346 1.321.646-4.699 2.013-10.633-.118-6.943-1.149M8.276 15.933s-1.028.761.542.924c2.032.209 3.636.227 6.413-.308 0 0 .384.389.987.602-5.679 1.661-12.007.13-7.942-1.218M13.116 11.475c1.158 1.333-.304 2.533-.304 2.533s2.939-1.518 1.589-3.418c-1.261-1.772-2.228-2.652 3.007-5.688 0-.001-8.216 2.051-4.292 6.573M19.33 20.504s.679.559-.747.991c-2.712.822-11.288 1.069-13.669.033-.856-.373.75-.89 1.254-.998.527-.114.828-.093.828-.093-.953-.671-6.156 1.317-2.643 1.887 9.58 1.553 17.462-.7 14.977-1.82M9.292 13.21s-4.362 1.036-1.544 1.412c1.189.159 3.561.123 5.77-.062 1.806-.152 3.618-.477 3.618-.477s-.637.272-1.098.587c-4.429 1.165-12.986.623-10.522-.568 2.082-1.006 3.776-.892 3.776-.892M17.116 17.584c4.503-2.34 2.421-4.589.968-4.285-.355.074-.515.138-.515.138s.132-.207.385-.297c2.875-1.011 5.086 2.981-.928 4.562 0-.001.07-.062.09-.118M14.401 0s2.494 2.494-2.365 6.33c-3.896 3.077-.888 4.832-.001 6.836-2.274-2.053-3.943-3.858-2.824-5.539 1.644-2.469 6.197-3.665 5.19-7.627M9.734 23.924c4.322.277 10.959-.153 11.116-2.198 0 0-.302.775-3.572 1.391-3.688.694-8.239.613-10.937.168 0-.001.553.457 3.393.639","size":20,"color":"wheat"},{"tag":"angular","tech":"Angular","name":"M9.93 12.645h4.134L11.996 7.74M11.996.009L.686 3.988l1.725 14.76 9.585 5.243 9.588-5.238L23.308 3.99 11.996.01zm7.058 18.297h-2.636l-1.42-3.501H8.995l-1.42 3.501H4.937l7.06-15.648 7.057 15.648z","size":20,"color":"red"},{"tag":"html","tech":"HTML","name":"M1.5 0h21l-1.91 21.563L11.977 24l-8.564-2.438L1.5 0zm7.031 9.75l-.232-2.718 10.059.003.23-2.622L5.412 4.41l.698 8.01h9.126l-.326 3.426-2.91.804-2.955-.81-.188-2.11H6.248l.33 4.171L12 19.351l5.379-1.443.744-8.157H8.531z","size":20,"color":"darkorange"},{"tag":"php","tech":"php","name":"M7.01 10.207h-.944l-.515 2.648h.838c.556 0 .97-.105 1.242-.314.272-.21.455-.559.55-1.049.092-.47.05-.802-.124-.995-.175-.193-.523-.29-1.047-.29zM12 5.688C5.373 5.688 0 8.514 0 12s5.373 6.313 12 6.313S24 15.486 24 12c0-3.486-5.373-6.312-12-6.312zm-3.26 7.451c-.261.25-.575.438-.917.551-.336.108-.765.164-1.285.164H5.357l-.327 1.681H3.652l1.23-6.326h2.65c.797 0 1.378.209 1.744.628.366.418.476 1.002.33 1.752a2.836 2.836 0 0 1-.305.847c-.143.255-.33.49-.561.703zm4.024.715l.543-2.799c.063-.318.039-.536-.068-.651-.107-.116-.336-.174-.687-.174H11.46l-.704 3.625H9.388l1.23-6.327h1.367l-.327 1.682h1.218c.767 0 1.295.134 1.586.401s.378.7.263 1.299l-.572 2.944h-1.389zm7.597-2.265a2.782 2.782 0 0 1-.305.847c-.143.255-.33.49-.561.703a2.44 2.44 0 0 1-.917.551c-.336.108-.765.164-1.286.164h-1.18l-.327 1.682h-1.378l1.23-6.326h2.649c.797 0 1.378.209 1.744.628.366.417.477 1.001.331 1.751zM17.766 10.207h-.943l-.516 2.648h.838c.557 0 .971-.105 1.242-.314.272-.21.455-.559.551-1.049.092-.47.049-.802-.125-.995s-.524-.29-1.047-.29z","size":20,"color":"violet"},{"tag":"mongodb","tech":"MongoDB","name":"M17.18 9.518c-1.263-5.56-4.242-7.387-4.562-8.086C12.266.939 11.885 0 11.885 0c-.002.019-.004.031-.005.049v.013h-.001c-.002.015-.003.025-.004.039v.015h-.002c0 .01-.002.018-.002.026v.026h-.003c-.001.008-.001.018-.003.025v.021h-.002c0 .007 0 .015-.002.021v.02h-.002c0 .01-.001.022-.002.032v.002c-.003.017-.006.034-.009.05v.008h-.002c-.001.004-.003.008-.003.012v.017h-.003v.022h-.005v.018h-.005v.021h-.004v.019h-.004v.017h-.006v.014h-.004v.018h-.004v.014h-.005v.013H11.8v.015h-.004c-.001.001-.001.003-.001.004v.01h-.003c-.001.002-.001.004-.001.006v.006h-.002c-.001.003-.002.008-.002.01-.003.007-.007.014-.01.021v.002c-.002.002-.004.005-.005.007v.008h-.004v.008h-.005v.008h-.003v.01h-.006v.014h-.004v.004h-.004v.008h-.004v.011h-.004v.008h-.006v.011h-.004v.008h-.005v.008h-.003v.01h-.005v.008h-.004v.006h-.004v.008h-.006V.76h-.004v.006h-.005v.008h-.004v.011h-.005v.004h-.003v.008h-.006v.004h-.004v.01h-.004v.004h-.004v.008h-.005v.006h-.003l-.002.004v.004h-.002c-.001.002-.002.002-.002.004v.001h-.001c-.001.003-.002.005-.004.007v.003h-.001c-.005.006-.008.012-.012.018v.001c-.002.002-.007.006-.009.01v.002h-.001c-.001.001-.003.002-.003.003v.003h-.002l-.003.003v.001h-.001c0 .001-.002.002-.003.004v.004h-.003l-.002.002v.002h-.002c0 .002-.002.002-.002.003v.003h-.004c0 .001-.001.002-.002.003V.92h-.003v.004h-.004V.93h-.004v.008h-.005V.93h-.005v.004h-.004V.94h-.005v.008h-.005v.004h-.004v.006h-.004v.004h-.004V.97h-.006v.004h-.004V.98h-.005v.004h-.004v.005h-.005v.01h-.002v.004h-.006v.005h-.004v.002h-.004v.004h-.005v.01h-.004v.004h-.005v.004h-.004v.006h-.005v.004h-.005v.004h-.004v.004h-.004v.01h-.004v.005h-.006v.004h-.004v.004h-.005v.006h-.004v.004h-.005v.007h-.004v.004h-.006V1.1h-.002v.004h-.004v.004h-.005v.004h-.004v.006h-.005v.004h-.003c-.001.001-.001.002-.001.002v.002h-.002l-.004.004s-.002.002-.004.003v.006h-.004v.005h-.004v.004h-.004v.004h-.003l-.003.003v.003h-.002l-.002.002v.003h-.002c-.005.006-.007.01-.014.016-.002.002-.008.007-.012.01-.012.008-.027.021-.039.032-.008.005-.016.012-.022.017v.001h-.001c-.016.013-.031.025-.049.039v.001c-.024.02-.047.039-.074.062V1.34h-.002c-.057.047-.117.1-.186.159V1.5h-.001c-.169.148-.37.338-.595.568l-.015.015-.004.004C9 3.494 6.857 6.426 6.631 11.164c-.02.392-.016.773.006 1.144v.009c.109 1.867.695 3.461 1.428 4.756v.001c.292.516.607.985.926 1.405v.001c1.102 1.455 2.227 2.317 2.514 2.526.441 1.023.4 2.779.4 2.779l.644.215s-.131-1.701.053-2.522c.057-.257.192-.476.349-.662.106-.075.42-.301.797-.645.018-.019.028-.036.044-.054 1.521-1.418 4.362-4.91 3.388-10.599z","size":20,"color":"green"},{"tag":"vscode","tech":"VS Code","name":"M23.15 2.587L18.21.21a1.494 1.494 0 0 0-1.705.29l-9.46 8.63-4.12-3.128a.999.999 0 0 0-1.276.057L.327 7.261A1 1 0 0 0 .326 8.74L3.899 12 .326 15.26a1 1 0 0 0 .001 1.479L1.65 17.94a.999.999 0 0 0 1.276.057l4.12-3.128 9.46 8.63a1.492 1.492 0 0 0 1.704.29l4.942-2.377A1.5 1.5 0 0 0 24 20.06V3.939a1.5 1.5 0 0 0-.85-1.352zm-5.146 14.861L10.826 12l7.178-5.448v10.896z","size":20,"color":"deepskyblue"},{"tag":"graphql","tech":"GraphQL","name":"M14.051 2.751l4.935 2.85c.816-.859 2.173-.893 3.032-.077.148.14.274.301.377.477.589 1.028.232 2.339-.796 2.928-.174.1-.361.175-.558.223v5.699c1.146.273 1.854 1.423 1.58 2.569-.048.204-.127.4-.232.581-.592 1.023-1.901 1.374-2.927.782-.196-.113-.375-.259-.526-.429l-4.905 2.832c.372 1.124-.238 2.335-1.361 2.706-.217.071-.442.108-.67.108-1.181.001-2.139-.955-2.14-2.136 0-.205.029-.41.088-.609l-4.936-2.847c-.816.854-2.171.887-3.026.07-.854-.816-.886-2.171-.07-3.026.283-.297.646-.506 1.044-.603l.001-5.699c-1.15-.276-1.858-1.433-1.581-2.584.047-.198.123-.389.224-.566.592-1.024 1.902-1.374 2.927-.782.177.101.339.228.48.377l4.938-2.85C9.613 1.612 10.26.423 11.39.088 11.587.029 11.794 0 12 0c1.181-.001 2.139.954 2.14 2.134.001.209-.03.418-.089.617zm-.515.877c-.019.021-.037.039-.058.058l6.461 11.19c.026-.009.056-.016.082-.023V9.146c-1.145-.283-1.842-1.442-1.558-2.588.006-.024.012-.049.019-.072l-4.946-2.858zm-3.015.059l-.06-.06-4.946 2.852c.327 1.135-.327 2.318-1.461 2.645-.026.008-.051.014-.076.021v5.708l.084.023 6.461-11.19-.002.001zm2.076.507c-.39.112-.803.112-1.192 0l-6.46 11.189c.294.283.502.645.6 1.041h12.911c.097-.398.307-.761.603-1.044L12.597 4.194zm.986 16.227l4.913-2.838c-.015-.047-.027-.094-.038-.142H5.542l-.021.083 4.939 2.852c.388-.404.934-.653 1.54-.653.627 0 1.19.269 1.583.698z","size":20,"color":"hotpink"},{"tag":"gatsby","tech":"Gatsby","name":"M12.001.007C5.326.007.007 5.326.007 12S5.326 23.995 12 23.995s11.994-5.319 11.994-11.994S18.676.007 12.001.007zM2.614 12.105l9.283 9.283c-5.111 0-9.283-4.172-9.283-9.283zm11.473 9.074L2.823 9.915C3.76 5.743 7.516 2.614 12 2.614a9.476 9.476 0 0 1 7.614 3.86L18.259 7.62a7.657 7.657 0 0 0-6.362-3.337A7.555 7.555 0 0 0 4.7 9.393l9.804 9.805c2.4-.835 4.276-2.92 4.798-5.424h-4.068v-1.773h6.154c0 4.485-3.129 8.24-7.301 9.178z","size":20,"color":"rebeccapurple"}]}},"markdownRemark":{"html":"<h1>Apollo Client</h1>\n<h2>Introduction</h2>\n<p><a href=\"https://www.apollographql.com/docs/react\">Apollo client react공식문서</a>를 공부했던 내용들을 한글로 더 편하게 보고 가끔씩 잊어버린 내용들을 리마인드 하기 위해 기존의 공식문서에 부족한 설명이나 빠진내용을 추가하고 너무 자세하게 나와 오히려 빠른 학습에는 방해가 되는 내용은 삭제하며 내용을 정리하던 중, 이 내용을 공유하면 GraphQL을 공부하고 Apollo를 시작하는 분들에게 도움이 되지 않을까 해서 문서를 작성하게 되었습니다. Apollo공식문서도 언급되어 있듯이 기본적인 GraphQL 문법을 알고 React에서 <code class=\"language-text\">ApolloProvider</code>나 <code class=\"language-text\">ApolloClient</code>로 기본적인 셋팅이 되어있다고 가정하여 작성했습니다. GraphQL문법에 익숙하지 않으시다면 <a href=\"https://graphql-kr.github.io/learn/\">GraphQL Guide</a>를 먼저 학습하신 후 Apollo를 학습하시는 것을 추천드립니다.</p>\n<h2>Query</h2>\n<h3>Table of Contents</h3>\n<ul>\n<li>\n<p><a href=\"#query\">Query</a></p>\n<ul>\n<li><a href=\"#%EC%BF%BC%EB%A6%AC-%EC%8B%A4%ED%96%89\">쿼리 실행</a></li>\n<li><a href=\"#%EC%BA%90%EC%8B%9C-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\">캐시 업데이트</a></li>\n<li><a href=\"#%EC%9A%94%EC%B2%AD%EC%83%81%ED%83%9C-%EA%B2%80%EC%82%AC\">요청상태 검사</a></li>\n<li><a href=\"#%EC%97%90%EB%9F%AC%EC%83%81%ED%83%9C-%EA%B2%80%EC%82%AC\">에러상태 검사</a></li>\n<li><a href=\"#%EC%BF%BC%EB%A6%AC-%EC%88%98%EB%8F%99%EC%8B%A4%ED%96%89\">쿼리 수동실행</a></li>\n<li><a href=\"#usequery-api\">useQuery API</a></li>\n</ul>\n</li>\n<li><a href=\"#mutation\">Mutation</a></li>\n</ul>\n<h3>쿼리 실행</h3>\n<p><code class=\"language-text\">useQuery</code> <a href=\"https://reactjs.org/docs/hooks-intro.html\">React hook</a>은 Apollo에서 쿼리를 실행하는 기본 API입니다. React 구성 요소 내에서 쿼리를 실행하려면 <code class=\"language-text\">useQuery</code>를 호출하고 GraphQL 쿼리 문자열을 매개변수로 전달합니다. 구성 요소가 렌더링되면 <code class=\"language-text\">useQuery</code>는 컴포넌트를 렌더링하는 데 사용할 수 있는 데이터 속성이 포함된 객체를 반환합니다.</p>\n<h4>Code example</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> gql <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql-tag'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@apollo/react-hooks'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">GET_DOG_PHOTO</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token string\">`\n  query Dog($breed: String!) {\n    dog(breed: $breed) {\n      id\n      displayImage\n    }\n  }\n`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">DogPhoto</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> breed <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GET_DOG_PHOTO</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    variables<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> breed <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`Error! </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>dog<span class=\"token punctuation\">.</span>displayImage<span class=\"token punctuation\">}</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">useQuery</code>를 사용하여 GraphQL서버에 요청을 보내며 응답시 상태에 따라 컴포넌트를 자동으로 리렌더링 합니다. <code class=\"language-text\">loading</code>이 <code class=\"language-text\">true</code>이며 <code class=\"language-text\">error</code>가 없으면 쿼리요청 무사히 완료된 겁니다.</p>\n<blockquote>\n<p>Apollo client는 쿼리결과를 자동으로 cache하여 컴포넌트 리렌더링 등에 따라 쿼리 재요청시 서버로 요청을 보내지 않고 캐시된 데이터에서 찾아 응답합니다. <code class=\"language-text\">useQuery</code>의 옵션에 <code class=\"language-text\">fetchPolicy</code>을 주어 요청처리방법을 변경할 수 있습니다.(default값은 <code class=\"language-text\">cache-first</code>입니다.)</p>\n<table>\n<thead>\n<tr>\n<th>PROPERTY</th>\n<th>TYPE</th>\n<th>DESCRIPTION</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">cache-first</code></td>\n<td>string</td>\n<td>캐시를 먼저 확인 후 없으면 요청을 보냅니다.(default)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">cache-only</code></td>\n<td>string</td>\n<td>캐시만 확인하고 요청은 보내지 않습니다.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">cache-and-network</code></td>\n<td>string</td>\n<td>캐시를 통해 먼저 요청처리를 하고 이와는 별개로 최신데이터를 얻기위해 서버요청을 합니다.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">network-only</code></td>\n<td>string</td>\n<td>쿼리를 처리할 때 네트워크 요청만 사용합니다.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">no-cache</code></td>\n<td>string</td>\n<td>항상 네트워크 요청을 사용해 데이터를 처리하고 응답결과를 캐싱하지 않습니다.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>code example</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">DogPhoto</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> breed <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GET_DOG_PHOTO</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n   variables<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> breed <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   fetchPolicy<span class=\"token punctuation\">:</span> <span class=\"token string\">'cache-and-network'</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token operator\">...</span></code></pre></div>\n</blockquote>\n<h3>캐시 업데이트</h3>\n<p><code class=\"language-text\">useQuery</code>가 응답한 데이터를 자동으로 캐시에 저장하기 때문에 최신데이터 상태를 유지하지 못합니다(ex. 게시글목록을 보고 있는데 누군가 새게시글을 작성하더라도 이를 볼 수 없음).\nApollo는 데이터를 항상 최신상태로 유지하는 방법을 2가지 제공합니다.</p>\n<ul>\n<li>Polling</li>\n<li>Refetching</li>\n</ul>\n<h4>Polling</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">DogPhoto</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> breed <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GET_DOG_PHOTO</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    variables<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> breed <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    skip<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>breed<span class=\"token punctuation\">,</span>\n    pollInterval<span class=\"token punctuation\">:</span>  <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token operator\">...</span></code></pre></div>\n<p><code class=\"language-text\">useQuery</code>의 옵션으로 <code class=\"language-text\">pollInterval</code>을 입력해주면 <code class=\"language-text\">0.5</code>초마다 서버로 요청을 보내게 됩니다. 만약, 응답받은 데이터가 기존과 다르다면 캐시를 업데이트하고 컴포넌트를 리렌더링 합니다. 만약, 데이터가 같다면 아무일도 발생하지 않습니다. 또한, <code class=\"language-text\">pollInterval</code>을 <code class=\"language-text\">0</code>으로 주게되면 polling이 일어나지 않습니다.</p>\n<blockquote>\n<p><code class=\"language-text\">skip</code>이 <code class=\"language-text\">true</code>라면 쿼리요청은 일어나지 않습니다. 위의 예에서는 <code class=\"language-text\">breed</code>가 <code class=\"language-text\">undefined</code>라면 쿼리요청이 무시됩니다.</p>\n</blockquote>\n<blockquote>\n<p><code class=\"language-text\">useQuery</code>로부터 반환되는 <code class=\"language-text\">startPolling</code>과 <code class=\"language-text\">stopPolling</code>을 사용하여 polling이 일어나는 시점을 동적으로 정할 수 있습니다.</p>\n<table>\n<thead>\n<tr>\n<th>PROPERTY</th>\n<th>TYPE</th>\n<th>DESCRIPTION</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">startPolling</code></td>\n<td>(interval: number) => void</td>\n<td><code class=\"language-text\">ms</code>형태의 interval간격을 인자로 받아 polling을 발생시킵니다.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">stopPolling</code></td>\n<td>() => void</td>\n<td>polling을 중지시킵니다.</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h4>Refetching</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">DogPhoto</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> breed <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> refetch <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GET_DOG_PHOTO</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    variables<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> breed <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    skip<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>breed<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token operator\">...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>dog<span class=\"token punctuation\">.</span>displayImage<span class=\"token punctuation\">}</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">refetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Refetch<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">useQuery</code>는 <code class=\"language-text\">refetch</code>함수를 반환하며 호출시 refetching이 발생합니다. <code class=\"language-text\">button</code>을 클릭시 refetching이 발생합니다.</p>\n<h3>요청상태 검사</h3>\n<p>위의 예에서는 refetching을 하게 되면 요청상태를 알 수 없습니다. <code class=\"language-text\">useQuery</code>가 반환하는 <code class=\"language-text\">loading</code>는 초기 요청상태만을 나타내기 때문입니다. 뿐만 아니라, 이 외에도 쿼리의 요청상태를 더 자세히 알아야 할 경우가 있습니다. 이와 같은 경우엔 다음과 같은 방법으로 상태를 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">DogPhoto</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> breed <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> refetch<span class=\"token punctuation\">,</span> networkStatus <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>\n    <span class=\"token constant\">GET_DOG_PHOTO</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      variables<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> breed <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      skip<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>breed<span class=\"token punctuation\">,</span>\n      notifyOnNetworkStatusChange<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>networkStatus <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'Refetching!'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`Error! </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>dog<span class=\"token punctuation\">.</span>displayImage<span class=\"token punctuation\">}</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">refetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Refetch<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">useQuery</code>옵션에 <code class=\"language-text\">notifyOnNetworkStatusChange</code>의 값을 <code class=\"language-text\">true</code>로 주고 <code class=\"language-text\">useQuery</code>로부터 반환되는 <code class=\"language-text\">networkStatus</code>를 사용하여 요청의 상태를 알 수 있습니다. <code class=\"language-text\">networkStatus</code>는 1~8까지의 정수로 각각 다음과 같은 상태를 나타냅니다.</p>\n<table>\n<thead>\n<tr>\n<th>networkStatus</th>\n<th>DESCRIPTION</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>처음 실행되는 쿼리에 대해 현재 요청중</td>\n</tr>\n<tr>\n<td>4</td>\n<td><code class=\"language-text\">refetch</code>가 호출되었고 현재 요청중</td>\n</tr>\n<tr>\n<td>6</td>\n<td>현재 polling중</td>\n</tr>\n<tr>\n<td>7</td>\n<td>현재 아무 요청도 진행중이 아니며 에러도 없는 경우</td>\n</tr>\n<tr>\n<td>8</td>\n<td>요청이 진행중이지 않지만 에러가 있는경우</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>나머지 상태나 더 자세한 내용은 <a href=\"https://github.com/apollographql/apollo-client/blob/master/src/core/networkStatus.ts\">source</a>를 참고하세요.</p>\n</blockquote>\n<h3>에러상태 검사</h3>\n<p><code class=\"language-text\">useQuery</code>의 옵션으로 <code class=\"language-text\">errorPolicy</code>를 설정하면 에러에 따른 응답 데이터를 조정할 수 있습니다. <code class=\"language-text\">errorPolicy</code>의 값으로는 <code class=\"language-text\">none</code>와 <code class=\"language-text\">all</code>을 줄 수 있으며 default값은 <code class=\"language-text\">none</code>입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">DogPhoto</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> breed <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GET_DOG_PHOTO</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    variables<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> breed <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    errorPolicy<span class=\"token punctuation\">:</span> <span class=\"token string\">'none'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// undefined</span>\n  \n<span class=\"token operator\">...</span></code></pre></div>\n<p><code class=\"language-text\">errorPolicy</code>의 값으로 <code class=\"language-text\">none</code>를 주게 되면 응답과정에서 에러가 발생 했을 경우 <code class=\"language-text\">data</code>의 값은 <code class=\"language-text\">undefined</code>가 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">DogPhoto</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> breed <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GET_DOG_PHOTO</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    variables<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> breed <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    errorPolicy<span class=\"token punctuation\">:</span> <span class=\"token string\">'all'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// { dog: null }</span>\n  \n<span class=\"token operator\">...</span></code></pre></div>\n<p>하지만, <code class=\"language-text\">errorPolicy</code>의 값으로 <code class=\"language-text\">all</code>를 주게 되면 응답과정에서 에러가 발생하더라도 <code class=\"language-text\">data</code>의 값은 포맷은 일치하지만 값으로 <code class=\"language-text\">null</code>이 들어간 응답객체가 됩니다.</p>\n<blockquote>\n<p>응답에서 반환되는 <code class=\"language-text\">error</code>객체는 <code class=\"language-text\">graphQLErrors</code>, <code class=\"language-text\">networkError</code>, <code class=\"language-text\">message</code>, <code class=\"language-text\">extraInfo</code>를 키값으로 가지고 있는 객체이며 에러메세지는 <code class=\"language-text\">error.graphQLErrors[0].message</code>에 들어가게 됩니다.</p>\n</blockquote>\n<h3>쿼리 수동실행</h3>\n<p>쿼리는 일반적으로 컴포넌트가 마운트 및 렌더링 되고 <code class=\"language-text\">useQuery</code>가 호출되면 자동으로 실행됩니다. 하지만, 쿼리를 수동으로 실행하고 싶다면 <code class=\"language-text\">useLazyQuery</code>를 사용해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useLazyQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@apollo/react-hooks'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">DogPhoto</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> breed <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>dog<span class=\"token punctuation\">,</span> setDog<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>getDog<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useLazyQuery</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GET_DOG_PHOTO</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Loading <span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">&amp;&amp;</span> data<span class=\"token punctuation\">.</span>dog<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setDog</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>dog <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>dog<span class=\"token punctuation\">.</span>displayImage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> variables<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> breed<span class=\"token punctuation\">:</span> <span class=\"token string\">'bulldog'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        Click me<span class=\"token operator\">!</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>컴포넌트가 렌더링 되고 <code class=\"language-text\">useLazyQuery</code>를 호출해도 쿼리가 바로 실행되지 않고 버튼 클릭시 <code class=\"language-text\">useLazyQuery</code>에서 반환된 <code class=\"language-text\">getDog</code>함수를 호출하여 쿼리를 실행합니다. <code class=\"language-text\">getDog</code>의 매개변수대신 해당값을 <code class=\"language-text\">useLazyQuery</code>의 옵션에 넣어도 결과는 동일합니다.</p>\n<h3>useQuery API</h3>\n<h4>Options</h4>\n<table>\n<thead>\n<tr>\n<th>OPTION</th>\n<th>TYPE</th>\n<th>DESCRIPTION</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">query</code></td>\n<td>DocumentNode</td>\n<td>graphql 쿼리</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">variables</code></td>\n<td>{ [key: string]: any }</td>\n<td>쿼리실행에 필요한 변수</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">pollInterval</code></td>\n<td>number</td>\n<td><code class=\"language-text\">ms</code>형태의 polling interval 간격</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">notifyOnNetworkStatusChange</code></td>\n<td>boolean</td>\n<td>만약 <code class=\"language-text\">true</code>라면 쿼리요청에 따른 네트워크상태를 업데이트하며 상태가 변할 때마다 리렌더링을 합니다. 만약 <code class=\"language-text\">false</code>라면 쿼리에 따른 응답데이터 변경 여부에 따라 리렌더링을 합니다. 주로 refetching 진행여부를 나타내기위해 사용됩니다.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">fetchPolicy</code></td>\n<td>FetchPolicy</td>\n<td>네트워크 요청전략.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">errorPolicy</code></td>\n<td>ErrorPolicy</td>\n<td>에러여부에 따른 <code class=\"language-text\">data</code>포맷 핸들링</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ssr</code></td>\n<td>boolean</td>\n<td>server-side-rendering동안 쿼리 skip여부</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">displayName</code></td>\n<td>string</td>\n<td>React 개발툴에 나타내기 위한 컴포넌트 이름. default값은 'Query'.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">skip</code></td>\n<td>boolean</td>\n<td>만약 <code class=\"language-text\">true</code>라면 쿼리가 실행되지 않습니다. <code class=\"language-text\">useLazyQuery</code>과 함께 사용할 수 없습니다.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">onCompleted</code></td>\n<td>(data: TData | {}) => void</td>\n<td>쿼리가 성공적으로 종료될때 호출되는 콜백함수</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">onError</code></td>\n<td>(error: ApolloError) => void</td>\n<td>쿼리요청중 에러발생시 호출되는 콜백함수</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">context</code></td>\n<td>Record&#x3C;string, any></td>\n<td>컴포넌트와 network interface간에 공유되는 context</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">partialRefetch</code></td>\n<td>boolean</td>\n<td>...</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">client</code></td>\n<td>ApolloClient</td>\n<td><code class=\"language-text\">ApolloClient</code>인스턴스</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">returnPartialData</code></td>\n<td>boolean</td>\n<td>만약 <code class=\"language-text\">true</code>라면, 쿼리요청전 먼저 캐시에서 해당하는 데이터를 반환합니다. 그 후, 다음작업이 진행됩니다. 일반적으로 쿼리가 최초 요청되기 전에는 <code class=\"language-text\">useQuery</code>가 반환하는 <code class=\"language-text\">data</code>는 <code class=\"language-text\">undefined</code>이지만 이 옵션을 <code class=\"language-text\">true</code>로 설정한다면 요청전에 미리 캐시에 있는 데이터를 반환해 <code class=\"language-text\">data</code>를 셋팅함으로써 더 빠른 렌더링이 가능합니다.</td>\n</tr>\n</tbody>\n</table>\n<h4>Results</h4>\n<table>\n<thead>\n<tr>\n<th>PROPERTY</th>\n<th>TYPE</th>\n<th>DESCRIPTION</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">data</code></td>\n<td>TData</td>\n<td>GraphQL쿼리의 결과를 포함하는 객체</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">loading</code></td>\n<td>boolean</td>\n<td>요청의 진행중 여부</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">error</code></td>\n<td>ApolloError</td>\n<td><code class=\"language-text\">graphQLErrors</code>과 <code class=\"language-text\">networkError</code>의 runtime에러</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">variables</code></td>\n<td>{ [key: string]: any }</td>\n<td>쿼리가 실행될때 전달했던 변수를 포함하는 객체</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">networkStatus</code></td>\n<td>NetworkStatus</td>\n<td>network의 상태를 나타내는 값</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">refetch</code></td>\n<td>(variables?: TVariables) => Promise<code class=\"language-text\">&lt;</code>ApolloQueryResult<code class=\"language-text\">&gt;</code></td>\n<td>쿼리를 refetch하도록 해주는 함수</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">fetchMore</code></td>\n<td>({ query?: DocumentNode, variables?: TVariables, updateQuery: Function}) => Promise<code class=\"language-text\">&lt;</code>ApolloQueryResult<code class=\"language-text\">&gt;</code></td>\n<td>페이지네이션에 쓰이는 함수</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">startPolling</code></td>\n<td>(interval: number) => void</td>\n<td>주기적으로 polling이벤트를 발생시키는 함수</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">stopPolling</code></td>\n<td>() => void</td>\n<td>polling을 멈추는 함수</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">subscribeToMore</code></td>\n<td>(options: { document: DocumentNode, variables?: TVariables, updateQuery?: Function, onError?: Function}) => () => void</td>\n<td>subscription에 사용되는 함수. 반환되는 함수는 subscription취소에 사용된다.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">updateQuery</code></td>\n<td>(previousResult: TData, options: { variables: TVariables }) => TData</td>\n<td>fetch, mutation, subscription외에 캐시를 업데이트 할 수 있도록 해주는 함수</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">client</code></td>\n<td>ApolloClient</td>\n<td><code class=\"language-text\">ApolloClient</code>인스턴스. 주기적으로 쿼리를 없애거나 캐시에 접근할 수 있다.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">called</code></td>\n<td>boolean</td>\n<td><code class=\"language-text\">useLazyQuery</code>로부터 반환되는 속성. <code class=\"language-text\">useLazyQuery</code>가 호출되었는지 여부를 나타낸다.</td>\n</tr>\n</tbody>\n</table>\n<h2>Mutation</h2>\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#query\">Query</a></li>\n<li>\n<p><a href=\"#mutation\">Mutation</a></p>\n<ul>\n<li><a href=\"#%EB%AE%A4%ED%85%8C%EC%9D%B4%EC%85%98-%EC%8B%A4%ED%96%89\">뮤테이션 실행</a></li>\n<li><a href=\"#%EB%AE%A4%ED%85%8C%EC%9D%B4%EC%85%98-%EC%8B%A4%ED%96%89%ED%9B%84-%EC%BA%90%EC%8B%9C-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\">뮤테이션 실행후 캐시 업데이트</a></li>\n<li><a href=\"#usemutation-api\">useMutation API</a></li>\n</ul>\n</li>\n</ul>\n<h3>뮤테이션 실행</h3>\n<p><code class=\"language-text\">useMutation</code> <a href=\"https://reactjs.org/docs/hooks-intro.html\">React hook</a>은 Apollo에서 뮤테이션을 실행하기 위한 기본 API입니다. React 구성 요소 내에서 뮤테이션을 실행하려면 <code class=\"language-text\">useMutation</code>를 호출하고 GraphQL 쿼리 문자열을 매개변수로 전달합니다. 구성 요소가 렌더링되면 <code class=\"language-text\">useMutation</code>는 다음과 같은 속성을 반환합니다.</p>\n<ul>\n<li>뮤테이션을 실행하는 함수</li>\n<li>뮤테이션의 상태를 나타내는 객체</li>\n</ul>\n<h4>Code example</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> gql <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql-tag'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useMutation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@apollo/react-hooks'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ADD_TODO</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token string\">`\n  mutation AddTodo($type: String!) {\n    addTodo(type: $type) {\n      id\n      type\n    }\n  }\n`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">AddTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> input<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>addTodo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ADD_TODO</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form\n        onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> variables<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> input<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          input<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            input <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>Add Todo<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">useMutation</code>은 뮤테이션을 바로 실행하지 않습니다. 대신에, 뮤테이션을 실행할 수 있는 <code class=\"language-text\">addTodo</code>함수와 뮤테이션 실행후 응답받을 <code class=\"language-text\">data</code>를 포함한 객체를 반환합니다. 그 후, 위의 예에서는 버튼클릭시 <code class=\"language-text\">addTodo</code>함수가 호출되며 뮤테이션이 실행됩니다. <code class=\"language-text\">useMutation</code>이 반환하는 인자의 두번째 객체는 뮤테이션 실행전, 실행중, 완료 상태에서 각각 다음과 같은 상태를 가지며 객체 내의 속성들은 다음과 같은 역할을 합니다.</p>\n<ul>\n<li>\n<p>실행전</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\nloading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\ncalled<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\nclient<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>ApolloClient 인스턴스<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>실행중</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\nloading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\nerror<span class=\"token punctuation\">:</span> <span class=\"token keyword\">undefined</span>\ndata<span class=\"token punctuation\">:</span> <span class=\"token keyword\">undefined</span>\ncalled<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\nclient<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>ApolloClient 인스턴스<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>완료</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\nloading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\nerror<span class=\"token punctuation\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>GraphQL error객체<span class=\"token punctuation\">]</span>\ndata<span class=\"token punctuation\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>응답받은 데이터<span class=\"token punctuation\">]</span>\ncalled<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\nclient<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>ApolloClient 인스턴스<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>loading : 현재 뮤테이션이 요청중인지 여부</li>\n<li>error : 뮤테이션 요청중 발생한 에러 객체. 에러가 발생하지 않았다면 <code class=\"language-text\">undefined</code>가 됨.</li>\n<li>data : 뮤테이션 실행 후 응답받은 데이터. 에러가 발생했다면 <code class=\"language-text\">undefined</code>가 됨. 만약, <code class=\"language-text\">useMutation</code>의 옵션에 <code class=\"language-text\">ignoreResults: true</code>를 준다면 완료후라도 <code class=\"language-text\">undefined</code>가 됨. </li>\n<li>called : 뮤테이션이 실행함수의 호출 여부</li>\n<li>client : <code class=\"language-text\">ApolloClient</code>인스턴스</li>\n</ul>\n<h3>뮤테이션 실행후 캐시 업데이트</h3>\n<p>한 예로 게시판을 생각한다면, 뮤테이션을 실행하는 경우는 게시글 생성, 수정, 삭제 등이 있습니다. 이 때, 뮤테이션은 백앤드의 실제적인 데이터를 변경하므로 클라이언트쪽의 캐시도 업데이트가 되어야 합니다. 뮤테이션 관련하여 캐시 업데이트는 2가지 경우로 나누어집니다.</p>\n<ul>\n<li>하나의 엔티티만 변경한 경우(ex. 게시글 하나만 수정)</li>\n<li>여러개의 엔티티를 수정하거나 엔티티를 생성, 삭제하는 경우</li>\n</ul>\n<h4>하나의 엔티티만 변경한 경우</h4>\n<p>하나의 엔티티만 변경한 경우, 뮤테이션이 성공적으로 완료된 후, Apollo가 자동으로 캐시를 업데이트 합니다. 단, 한가지 조건이 있는데 변경한 엔티티의 <code class=\"language-text\">id</code>를 반환해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> gql <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql-tag'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useMutation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@apollo/react-hooks'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">UPDATE_TODO</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token string\">`\n  mutation UpdateTodo($id: String!, $type: String!) {\n    updateTodo(id: $id, type: $type) {\n      id\n      type\n    }\n  }\n`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GET_TODOS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>updateTodo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token constant\">UPDATE_TODO</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Error <span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> type <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> input<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>form\n          onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">updateTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> variables<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">:</span> input<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            input<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>input\n            ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n              input <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>Update Todo<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 예에서 뮤테이션을 실행하면 변경된 todo의 <code class=\"language-text\">id</code>와 <code class=\"language-text\">type</code>를 반환하고 있습니다. Apollo는 캐시에서 각 엔티티를 <code class=\"language-text\">id</code>로 관리하므로 뮤테이션 실행 후, <code class=\"language-text\">id</code>를 반환한다면 Apollo가 캐시를 자동으로 업데이트 합니다.</p>\n<h4>여러개의 엔티티를 수정하거나 엔티티를 생성, 삭제하는 경우</h4>\n<p>여러개의 엔티티를 변경하거나 생성, 삭제를 하는 경우, 캐시는 자동으로 업데이트 되지 않습니다. 이런 경우, <code class=\"language-text\">useMutation</code>의 옵션으로 줄 수 있는 <code class=\"language-text\">update</code>함수를 사용해야 합니다. 예를 들어, <a href=\"#%EB%AE%A4%ED%85%8C%EC%9D%B4%EC%85%98-%EC%8B%A4%ED%96%89\">뮤테이션 실행</a>의 code example에서 <code class=\"language-text\">addTodo</code>뮤테이션이 실행되 새로운 하나의 할일이 추가된다면 캐시에도 업데이트 해야합니다. 이때, 다음과 같은 예제로 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">GET_TODOS</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token string\">`\n  query GetTodos {\n    todos {\n      id\n      type\n    }\n  }\n`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">AddTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> input<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>addTodo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span>\n    <span class=\"token constant\">ADD_TODO</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> addTodo <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> todos <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">readQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> query<span class=\"token punctuation\">:</span> <span class=\"token constant\">GET_TODOS</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cache<span class=\"token punctuation\">.</span><span class=\"token function\">writeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          query<span class=\"token punctuation\">:</span> <span class=\"token constant\">GET_TODOS</span><span class=\"token punctuation\">,</span>\n          data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> todos<span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>addTodo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form\n        onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> variables<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> input<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          input<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            input <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>Add Todo<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">...</span></code></pre></div>\n<p><code class=\"language-text\">useMutation</code>의 옵션으로 <code class=\"language-text\">update</code>에 함수를 전달할 수 있는데 이때, 이 함수는 뮤테이션이 정상적으로 완료시 호출되며 이 함수는 첫번째 인자로 <code class=\"language-text\">cache</code>인스턴스, 두번째 인자로 <code class=\"language-text\">{ data: [응답된 데이터] }</code> 형태의 객체를 받습니다. 그 다음, <code class=\"language-text\">cache.readQuery({ query: GET_TODOS })</code>를 통해 기존의 <code class=\"language-text\">todos</code>를 얻어오며 여기에 새로 추가된 <code class=\"language-text\">addTodo</code>를 병합후 <code class=\"language-text\">cache.writeQuery</code>함수를 호출하여 기존의 캐시를 업데이트 합니다. <code class=\"language-text\">cache.writeQuery</code>가 호출될 경우, Apollo는 변경된 데이터를 참조하고 있던 쿼리들에 알리고 해당 캠포넌트들은 변경된 데이터를 반영하여 리렌더링 됩니다.</p>\n<blockquote>\n<p>만약 뮤테이션에 <a href=\"https://www.apollographql.com/docs/react/performance/optimistic-ui/\">optimistic response</a>를 적용했다면 <code class=\"language-text\">update</code>함수는 optimistic결과에 한번, 뮤테이션에 의해 응답된 실제결과 한번 총 2번 호출되게 됩니다.<br>\noptimistic UI란 먼저 서버로 요청을 보내고 응답될 것으로 예상되는 임시데이터를 사용하여 미리 UI를 업데이트 합니다. 그 후, 서버로부터 실제결과가 응답되면 다시 한번 실제 데이터로 UI를 업데이트 하는 것을 말합니다.<br>\n<code class=\"language-text\">useMutation</code>의 옵션으로 <code class=\"language-text\">optimisticResponse</code>에 객체를 넣어 줄 수 있는데, 이렇게 되면 뮤테이션 실행시 즉시 <code class=\"language-text\">update</code>함수가 실행되며 두번째 인자에 <code class=\"language-text\">optimisticResponse</code>에 넣어 주었던 객체가 전달됩니다. 그 후, 서버로부터 실제결과가 응답되면 다시 한 번 <code class=\"language-text\">update</code>함수를 호출합니다.</p>\n</blockquote>\n<h3>useMutation API</h3>\n<h4>Options</h4>\n<table>\n<thead>\n<tr>\n<th>OPTION</th>\n<th>TYPE</th>\n<th>DESCRIPTION</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">mutation</code></td>\n<td>DocumentNode</td>\n<td>graphql 뮤테이션</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">variables</code></td>\n<td>{ [key: string]: any }</td>\n<td>뮤테이션 실행에 필요한 변수</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">update</code></td>\n<td>(cache: DataProxy, mutationResult: FetchResult)</td>\n<td>뮤테이션 실행완료후 호출되는 콜백함수이며 캐시를 업데이트 할 때 사용</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ignoreResults</code></td>\n<td>boolean</td>\n<td>만약 <code class=\"language-text\">true</code>라면 뮤테이션 결과에 대한 데이터가 반환되지 않습니다.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">optimisticResponse</code></td>\n<td>Object</td>\n<td>서버로부터 응답이 오기전에 예상되는 데이터를 넘겨줌으로써 UI를 빠르게 업데이트 할 수 있습니다.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">refetchQueries</code></td>\n<td>Array&#x3C;string | { query: DocumentNode, variables?: TVariables}> | ((mutationResult: FetchResult) => Array&#x3C;string | { query: DocumentNode, variables?: TVariables}>)</td>\n<td>...</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">awaitRefetchQueries</code></td>\n<td>boolean</td>\n<td>...</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">onCompleted</code></td>\n<td>(data: TData) => void</td>\n<td>뮤테이션이 정상적으로 완료된 후 호출되는 콜백함수</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">onError</code></td>\n<td>(error: ApolloError) => void</td>\n<td>뮤테이션 실행중 에러발생시 호출되는 콜백함수</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">context</code></td>\n<td>Record&#x3C;string, any></td>\n<td>컴포넌트와 network interface간에 공유되는 context</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">client</code></td>\n<td>ApolloClient</td>\n<td><code class=\"language-text\">ApolloClient</code>인스턴스</td>\n</tr>\n</tbody>\n</table>\n<h4>Results</h4>\n<table>\n<thead>\n<tr>\n<th>PROPERTY</th>\n<th>TYPE</th>\n<th>DESCRIPTION</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">data</code></td>\n<td>TData</td>\n<td>뮤테이션 실행 후 반환되는 데이터. 뮤테이션의 옵션으로 <code class=\"language-text\">ignoreResults</code>가 <code class=\"language-text\">true</code>일 경우, <code class=\"language-text\">undefined</code>가 됩니다.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">loading</code></td>\n<td>boolean</td>\n<td>뮤테이션 실행중 여부</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">error</code></td>\n<td>ApolloError</td>\n<td>뮤테이션으로부터 반환되는 에러객체</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">called</code></td>\n<td>boolean</td>\n<td>뮤테이션 실행함수가 호출되었는지 여부</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">client</code></td>\n<td>ApolloClient</td>\n<td><code class=\"language-text\">ApolloClient</code>인스턴스. <code class=\"language-text\">client.readQuery</code> 또는 <code class=\"language-text\">client.writeQuery</code>로 캐시를 업데이트 할 수 있습니다.</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"title":"Apollo client 공식문서 정리","date":"March 20, 2020","tags":["javascript","graphql","apollo"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/apollo-client/"}}